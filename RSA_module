# -*- coding: utf-8 -*-
"""
Created on Wed Jun 23 10:57:27 2021

@author: n5.clisty
"""

import numpy as np
import time
import pandas as pd

def RS_CAM(t_title, t_Acc, t_delta, Direction):
    
    # period = np.array([0.01,0.02,0.022,0.025,0.029,0.03,0.032,0.035,0.036,
    #                     0.04,0.042,0.044,0.045,0.046,0.048,0.05,0.055,0.06,0.065,0.067,0.07,
    #                     0.075,0.08,0.085,0.09,0.095,0.1,0.11,0.12,0.125,0.13,0.133,0.14,0.15,
    #                     0.16,0.17,0.18,0.19,0.2,0.22,0.24,0.25,0.26,0.28,0.29,0.3,0.32,0.34,
    #                     0.35,0.36,0.38,0.4,0.42,0.44,0.45,0.46,0.48,0.5,0.55,0.6,0.65,0.667,
    #                     0.7,0.75,0.8,0.85,0.9,0.95,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,
    #                     2,2.2,2.4,2.5,2.6,2.8,3,3.2,3.4,3.5,3.6,3.8,4,4.2,4.4,4.6,4.8,5,7.5,10])

    period = np.array([0.01, 0.010797752,    0.011659144,    0.012589254,    0.013593564,    0.014677993,    0.015848932,    0.017113283,    0.018478498,    0.019952623,
                       0.021544347,0.023263051,    0.025118864,    0.027122726,    0.029286446,    0.031622777,    0.034145489,    0.036869451,    0.039810717,    0.042986623,
                       0.046415888,    0.050118723,    0.054116953,    0.058434141,    0.063095734,    0.068129207,    0.073564225,    0.079432823,    0.08576959,   0.092611873,
                       0.1,    0.107977516,    0.11659144,    0.125892541,    0.135935639,    0.146779927,    0.158489319,    0.17113283,    0.18478498,    0.199526231,    0.215443469,
                       0.232630507,    0.251188643,    0.271227258,    0.292864456,    0.316227766,    0.341454887,    0.368694506,    0.398107171,    0.429866235,    0.464158883,    0.501187234,
                       0.541169527,    0.584341413,    0.630957344,    0.681292069,    0.735642254,    0.794328235,    0.857695899,    0.926118728,    1,    1.079775162,    1.165914401,    1.258925412,    1.359356391,
                       1.467799268,    1.584893192,    1.711328304,    1.847849797,    1.995262315,    2.15443469,    2.326305067,    2.511886432,    2.712272579,    2.928644565,    3.16227766,    3.414548874,    3.686945065,
                       3.981071706,    4.298662347,    4.641588834,    5.011872336,    5.411695265,    5.843414134,    6.309573445,    6.812920691,    7.356422545,    7.943282347,    8.576958986,    9.261187281,    10])
    Zeta = 0.05
    omega_n = 2*np.pi/period
    K = omega_n**2
    C = 2*omega_n*Zeta
    a1 = 4/(t_delta**2) + 2*C/t_delta
    a2 = 4/t_delta + C
    a3 = 1
    k_h = K + a1
    
    RSA = np.zeros((len(period),1))
    RSV = np.zeros((len(period),1))
    RSD = np.zeros((len(period),1))

    dis0 = 0
    vel0 = 0
    p0 = 0
    acc0 = 0
    p_i = t_Acc
    
    t_timetotal = time.time()
    
    for i in range(0,len(period)):
        start = time.time()
        Tn = period[i]
        print(str(t_title) + ' for ' +str(Direction)+ ': timestep of ' + str(Tn) + ' start')
        omega = omega_n[i]
        
        t_a1 = a1[i]
        t_a2 = a2[i]
        t_a3 = a3
        t_k_h = k_h[i]
        
        #dis0 = 0
        #vel0 = 0
        #p0 = 0
        #acc0 = p0 - t_C*vel0 - t_K*dis0
        #p_i = t_Acc * 980.7
        
        t_dis = np.zeros((len(t_Acc)+1,1))
        t_dis[0] = dis0
        t_vel = np.zeros((len(t_Acc)+1,1))
        t_vel[0] = vel0
        t_p_h = np.zeros((len(t_Acc)+1,1))
        t_p_h[0] = p0
        t_acc = np.zeros((len(t_Acc)+1,1))
        t_acc[0] = acc0
        
        for j in range(0, len(t_Acc)):
            tt_p_i = p_i[j]
            tt_dis = t_dis[j]
            tt_vel = t_vel[j]
            tt_acc = t_acc[j]
    
            ttt_p_h = tt_p_i + t_a1*tt_dis + t_a2*tt_vel + t_a3*tt_acc
            ttt_dis = ttt_p_h/t_k_h
            ttt_vel = 2*(ttt_dis - tt_dis)/t_delta - tt_vel
            ttt_acc = 4*(ttt_dis - tt_dis)/(t_delta**2) - 4*tt_vel/t_delta - tt_acc
            
            t_p_h[j+1] = ttt_p_h
            t_dis[j+1] = ttt_dis
            t_vel[j+1] = ttt_vel
            t_acc[j+1] = ttt_acc
        
        abs_dis = np.abs(t_dis)
        Max_dis = abs_dis.max()
        A = (omega**2) * Max_dis
        V = (omega) * Max_dis
        
        RSA[i] = A
        RSV[i] = V
        RSD[i] = Max_dis
        time_taken = round(time.time() - start, 2)
        print(str(t_title) + ' for ' +str(Direction)+ ': timestep of ' + str(Tn) + ' end; ' + str(time_taken) + ' seconds/step')
   
    tt_timetotal = round(time.time() - t_timetotal, 2)
    print(str(t_title) + ' took ' + str(tt_timetotal) + ' seconds with ' + str(len(t_Acc)) + ' acceleration data.')
    return RSA, RSV, RSD
